import pandas  as pd
import numpy as np
from functools import partial
from collections import defaultdict


colours = ['red', 'green', 'blue']
#not good
for i in range(len(colours)):
    print(colours[i])

#good
for colour in colours:
    print(colour)

#not
for i in range(len(colours)-1, -1, -1):
    print(colours[i])

#good
for colour in reversed(colours):
    print(colour)

#good (iterate over index, list with enumerate)
for i, colour in enumerate(colours):
    print(i, '->>', colours[i])


df = pd.DataFrame(np.random.randn(5, 5), columns=['a', 'b', 'c', 'd', 'e'])

#good (iterate over index, rows in dataframe with df.iterrows()
for index, row in df.iterrows():
    print(row.a)

#good
print(sorted(colours, key=len))


#good (use partial to reduce functions)
def power(base, exponent):
    return base ** exponent

cube = partial(power, exponent = 3)

# print(cube(3))

#good (use  else in for loops to catch break)
# def find(seq, target):
#     for i, value in enumerate(seq):
#         if value == tgt:
#             break
#     else:
#         return -1
#     return 1
#
# find(colours, 'blue')


#good (loop over dictionary keys)

d = {'matthew': 'blue', 'rachel': 'green', 'raymond': 'red'}

for k in d:
    print(k)

for k, v in iter(d.items()):
    print(v)
    print(k)

#good (create dictionaries with zip - not izip)
names = ['raymond', 'rachel', 'matthew']
colours = ['blue', 'red', 'green']

d = dict(zip(names, colours))
print(d)

#good (counting with dictionaries)

# d = {}
# for colour in colours:
#     if colour not in d:
#         d[colour] = 0
#     d[colour] += 1
#
# print(d)

#good  defalutdicts
# d = defaultdict(list)
# for name in names:
#     key = len(name)
#     d[key].append(name)
#
# print(d)

#good (use tuple unpacking)
def fibonacci(n):
    x, y = 0, 1
    for i in range(n):
        print(x)
        x, y = y, x+y

fibonacci(n=10)



