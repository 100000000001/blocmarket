classdef testMarketObject < matlab.unittest.TestCase
    % test MarketObject_new functionality
    
    properties
        mo % market object
    end % properties
 
    methods(TestMethodSetup)
        
        function createMarketObject(testCase)
            
            % Create market object
            testCase.mo = MarketObject();
        end % createMarketObject
        
        function testCreateMarket(testCase)
           % Create a market on (0, 1) and narrow it to (0.4, 1)
           
            % Create  a market
            testCase.mo.createMarket(struct('marketRootId', 1, 'marketBranchId', 1,...
                                'marketMin', 0, 'marketMax', 1,...
                                'traderId', 1, 'signatureMsg','sigmsg1',...
                                'signature', 'sig1'));
                            
            % Narrow market in min/max                
            testCase.mo.createMarket(struct('marketRootId', 1, 'marketBranchId', 1,...
                'marketMin', 0.4, 'marketMax', 1,...
                'traderId', 1, 'signatureMsg','sigmsg1',...
                'signature', 'sig1'));                
       
            testCase.verifyNotEmpty(testCase.mo.marketTable)
        end % testCreateMarket
        
        function testCreateUser(testCase)
            testCase.mo = testCase.mo.createUser(struct('verifyKey','a'));
            testCase.mo = testCase.mo.createUser(struct('verifyKey','b'));
            testCase.verifyNotEmpty(testCase.mo.userTable)
        end % testCreateUser        
        
    end % TestMethodSetup
 
%     methods(TestMethodTeardown)
%         function destroyMarketObject(testCase)
%             testCase.mo = [];
%         end
%     end % TestMethodTearDown
    
    methods (Test)
        
        function testMatchTrade(testCase)
            % Create a market on (0,1). Add some trades and check a basic match for (q=10, p=0.5)
            
            
            testCase.mo.createTrade(struct('traderId', 1, 'tradeRootId', 1, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', 10, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig'));
            
            
            testCase.mo.createTrade(struct('traderId', 2, 'tradeRootId', 2, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', -10, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig'));
            % Add trade to be matched
            
            
            testCase.verifyEqual(height(testCase.mo.orderBook),6)
            
        end % testMatchTrade
        
        function testOverlapMatch(testCase)
            % Create a market on (0,1). Add some trades and check a match
            % for (q=10, p=0.5) with an overlap trade (q=10, p=0.6)

            
            % Trader 1 selling 10 at 0.5
            testCase.mo.createTrade(struct('traderId', 1, 'tradeRootId', 1, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', -10, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig'));
            
            % Trader 2 buy 10 at 0.6
            testCase.mo.createTrade(struct('traderId', 2, 'tradeRootId', 2, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.6,...
                'quantity', 20, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig'));
            
            % Sum of quantity trades by trader/market/matched
            tmp = varfun(@sum, testCase.mo.orderBook, 'InputVariables', 'quantity',...
                'GroupingVariables', {'traderId', 'marketRootId', 'marketBranchId', 'isMatched', 'price'});        
            
            tmp2 = varfun(@(x)sum(abs(x)), tmp, 'InputVariables', 'sum_quantity', 'GroupingVariables', {'isMatched'})
            % Should have four rows (trader 1 has 10 matched and zero
            % unmatched, trader 2 has 10 matched and 10 unmatched)
            testCase.verifyEqual(tmp2{tmp2.isMatched== 0, 'Fun_sum_quantity'}, 10)
            testCase.verifyEqual(tmp2{tmp2.isMatched== 1, 'Fun_sum_quantity'}, 20)
            
            % 10 units left on the bid at 0.6
            tmp3 = varfun(@(x) sum(x), tmp, 'InputVariables', 'sum_quantity', 'GroupingVariables', {'isMatched', 'price'})
            testCase.verifyEqual(tmp3{tmp3.price== 0.6, 'Fun_sum_quantity'}, 10)
            
        end % testOverlapMatch
        
        function testSettleTrade(testCase)
            
            % Match a trade  at (p=0.5,q=10) and settle market by
            % setting marketMax=marketMin=1, then add a new trade that
            % won't  pass collateral check.
            
            testCase.mo.createTrade(struct('traderId', 1, 'tradeRootId', 1, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', 10, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig'));
            
            
            testCase.mo.createTrade(struct('traderId', 2, 'tradeRootId', 2, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', -10, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig'));
            
            % Settle market at 1
            
            testCase.mo.createMarket(struct('marketRootId', 1, 'marketBranchId', 1,...
                'marketMin', 1, 'marketMax', 1,...
                'traderId', 1, 'signatureMsg','sigmsg1',...
                'signature', 'sig1'));   
            
            % Add large trade priced at settlement price (will pass collateral) (q=1e6, p=1)
            
            testCase.mo.createTrade(struct('traderId', 1, 'tradeRootId', 3, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 1,...
                'quantity', 1e6, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig'));
            
            testCase.mo.createTrade(struct('traderId', 2, 'tradeRootId', 3, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 1,...
                'quantity', -1e6, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig'));
            
            testCase.verifyEqual(height(testCase.mo.orderBook), 12)
            
            % Add large trade priced at less than settlement (will fail collateral check)
            testCase.mo.createTrade(struct('traderId', 2, 'tradeRootId', 3, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.9,...
                'quantity', -1e6, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig'));            
            
            % Height should not have changed
            testCase.verifyEqual(height(testCase.mo.orderBook), 12)
            
        end  % testSettleCase
        
        function testSubMarket(testCase)
            % Test market branch by settling lower branch market and
            % looking moving collateral cases in upper branch
            % 
            % > m11 = (root = 1, branch = 1)
            %   m12 = (root = 1, branch = 2)
            %   m13 = (root = 1, branch = 3)
            % > check collateral on m12 
            
            
            % Settle m12 at 0
            testCase.mo.createMarket(struct('marketRootId', 1, 'marketBranchId', 2,...
                                'marketMin', 0, 'marketMax', 0,...
                                'traderId', 1, 'signatureMsg','sigmsg1',...
                                'signature', 'sig1'));
                            
            % Create submarket m13 (min = 0, max = 1)          
            testCase.mo.createMarket(struct('marketRootId', 1, 'marketBranchId', 3,...
                'marketMin', 0, 'marketMax', 1,...
                'traderId', 1, 'signatureMsg','sigmsg1',...
                'signature', 'sig1'));
            
            % Construct new trade (p = 0.5, q = 10) on m13
            newTrade13 = struct('traderId', 1, 'tradeRootId', 1, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', 10, 'marketRootId', 1,...
                'marketBranchId', 3,'signatureMsg',...
                'sigMsg', 'signature', 'sig');
            
            % Check collateral on open order on m13 (should be settled via
            % m12)
            [colChk, netCollateral] = testCase.mo.checkCollateral_public(newTrade13)
            testCase.verifyEqual(netCollateral, [-5; -5]);
            
            % Check collateral for (p=0.5, q=10) on m11 (should still be
            % [-1,5])
            newTrade11 = struct('traderId', 1, 'tradeRootId', 1, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', 10, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig')
            % Check collateral on open order on m11
            [colChk, netCollateral] = testCase.mo.checkCollateral_public(newTrade11);
            testCase.verifyLessThan( max(abs(netCollateral- [-1; 5])), 1e-9);
            
            
        end % testSubMarket
        
        function testMultiMarket(testCase)
            % Test for three independent markets and check collateral  of
            % one open orders on each.
            %
            % Create market 2
            testCase.mo.createMarket(struct('marketRootId', 2, 'marketBranchId', 1,...
                                'marketMin', 0, 'marketMax', 1,...
                                'traderId', 1, 'signatureMsg','sigmsg1',...
                                'signature', 'sig1'));
            % Create market 3                
            testCase.mo.createMarket(struct('marketRootId', 3, 'marketBranchId', 1,...
                                'marketMin', 0, 'marketMax', 1,...
                                'traderId', 1, 'signatureMsg','sigmsg1',...
                                'signature', 'sig1'));                            
                            
                            
            % Create open trade in m11
            newTrade11 = struct('traderId', 1, 'tradeRootId', 1, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', 10, 'marketRootId', 1,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig')
            testCase.mo.createTrade(newTrade11);
            
            % Create open trade in m21
            newTrade21 = struct('traderId', 1, 'tradeRootId', 1, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', 10, 'marketRootId', 2,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig');
            testCase.mo.createTrade(newTrade21);
            
            % Create open trade in m31
            newTrade31 = struct('traderId', 1, 'tradeRootId', 1, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', 10, 'marketRootId', 3,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig');
            testCase.mo.createTrade(newTrade31);            
            
            % Check collateral of new open order on m31
            newTrade31_ = struct('traderId', 1, 'tradeRootId', 1, 'tradeBranchId', 1,...
                'isMatched', 0, 'price', 0.5,...
                'quantity', 5, 'marketRootId', 3,...
                'marketBranchId', 1,'signatureMsg',...
                'sigMsg', 'signature', 'sig');
            
            % Check collateral of open trades and new  trade
            [colChk, netCollateral] = testCase.mo.checkCollateral_public(newTrade31_) 
            testCase.verifyLessThan( max(abs(netCollateral- [-7.5; -2.5; -7.5; 1.5; -7.5; -2.5; -7.5; 7.5])), 1e-9)            
            
        end % testMultiMarket
        
    end % tests  
    
end % classdef 